---
layout:     post
title:      "114514"
date:       2014-08-16 12:00:00
author:     "Mrbother"
header-img: "img/post-bg-miui6.jpg"
tags:
  - wed
---
> [洛谷](www.luogu.com.cn)
# 知识点

## 0.模板代码
```cpp
#include<bits/stdc++.h>
#define int long long
using namespace std;

signed main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
	return 0;
}
```
------------
## 1. 位运算
我们知道，计算机中的数在内存中都是以二进制形式进行存储的，而位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。

那么，涉及位运算的运算符如下表所示：

1. & 与 两个都为1时为1
2. | 或 两个都为0才为0
3. {-} 异或 两个相同为0相异才为1
4. ~ 取反 0变1 1变0
5. {<<} 左移 
6. {>>} 右移

看完，你可能会觉得挺简单的，但位运算的难点并不在这，而在于其性质、高级操作和它的应用。

```cpp
//li0
#include<bits/stdc++.h>
using namespace std;
int main() {
	int a = 0b1010;           // 
	int b = 0b0110;           // 
	printf("十进制值：%d\n", (a & b) ); //
	
	cout<<endl;
	cout<<"二进制值："<<bitset<8>(a&b); //输出为八位二进制数
	
	return 0;
}
/* & | ~  ^*/
```
```cpp
//li0-1
#include<bits/stdc++.h>
using namespace std;
int main() {
	int x,y;
	cin>>x>>y;
	cout<<"     x的二进制值："<<bitset<16>(x); //输出为16位二进制数
	cout<<endl;
	cout<<"     y的二进制值："<<bitset<16>(y); //输出为16位二进制数
	cout<<endl;
	cout<<"   x&y的二进制值："<<bitset<16>(x&y); //输出为16位二进制数
	cout<<endl;
	cout<<"   x|y的二进制值："<<bitset<16>(x|y); //输出为16位二进制数
	cout<<endl;
	cout<<"   x^y的二进制值："<<bitset<16>(x^y); //输出为16位二进制数
	cout<<endl;
	cout<<"    ~x的二进制值："<<bitset<16>(~x); //输出为16位二进制数
	cout<<endl;
	cout<<"    ~y的二进制值："<<bitset<16>(~y); //输出为16位二进制数
	cout<<endl;
	cout<<"x左移3的二进制值："<<bitset<16>(x<<3); //输出为16位二进制数
	cout<<endl;
	cout<<"y左移3的二进制值："<<bitset<16>(y<<3); //输出为16位二进制数
	cout<<endl;
	cout<<"x右移2的二进制值："<<bitset<16>(x>>2); //输出为16位二进制数
	cout<<endl;
	cout<<"y右移2的二进制值："<<bitset<16>(y>>2); //输出为16位二进制数
	cout<<endl;
	
	return 0;
}
```
$位运算的一些应用$
位运算实现乘除法
```cpp
//li1
#include<bits/stdc++.h>
using namespace std;
int main(){
	int a,b;
	cin>>a;
	b=a<<1; //左移一位实现 a*2
	cout<<b;
	
	cout<<endl;
	
	b=a>>1; //右移一位实现 a/2
	cout<<b;
	
	return 0;
}
```
位运算交换两整数
```cpp
//li2
#include<bits/stdc++.h>
using namespace std;
void jh(int &a,int &b){
	a ^= b;
	b ^= a;
	a ^= b;
}
/*
  第一步没啥好说a = a^b
  第二步：b=b^a,也就是b=b^a^b,也就是b=a^0,此处换值
  第三步：a=a^b 也就是a=a^b^a,也就是b 
 */
/*这效率非常高，我们来剖析其原理，对于a = a ∧ b 则b = b ∧ ( a ∧ b )，
  根据交换律以及异或性质，得b = b ∧ b ∧ a = 0 ∧ a = a ，
  同理a = ( a ∧ b ) ∧ a = 0 ∧ b = b 。
  这样就实现了交换操作。
  */
int main(){
	int a,b;
	cin>>a>>b;
	jh(a,b);
	cout<<a<<" "<<b;
	
	return 0;
}
```
位运算判断奇偶数
```cpp
//li3
#include<bits/stdc++.h>
using namespace std;

int main(){
	int x;
	while(~scanf("%d",&x)){	
		if(x&1){		
			cout << x << "是奇数" << endl; 		
		}
		
		else{	
			cout << x << "是偶数" << endl;	
		}	
	}
	
	return 0;
}
/*
  a&1 = 0  偶数
  a&1 = 1  奇数
  任何偶数二进制第一位数必定0，而奇数必定是1，而1的二进制就是1，所以可以用这个判断
 */
```
位运算改变正负性和求绝对值
```cpp
//改正负数li4-1
#include<bits/stdc++.h>
using namespace std;
int change(int a){
	return ~ a + 1;
}

int main(){
	int a;
	cin>>a;
	
	cout<<change(a);
	
	return 0;
}
```
```cpp
//绝对值li4-2
#include<bits/stdc++.h>
using namespace std;
int jd(int a){
	return (a^(a>>31))-(a>>31);
}
/*
  假设a是32位负整数，那么
  a的符号位是1，(a >> 31) 是 111...111，一共32个1，也就是-1的补码，
  和1进行异或 相当于 取反，即 0 ^ 1 = 1，1 ^ 1 = 0，
  x + 1 相当于 x - (-1)，x是任意数，
  那么
  将a按位取反的算法是：a ^ (a >> 31)，
  将a将位取反加1的算法是：(a ^ (a >> 31)) + 1 == (a ^ (a >> 31)) - (-1) == (a ^ (a >> 31)) - (a >> 31)。
  
  
  假设b是32位正整数，那么
  b的符号位是0，(b >> 31) 是 000...000，一共32个0，也就是0的补码，
  和0进行异或 相当于 不变，即 0 ^ 0 = 0，1 ^ 0 = 1，
  那么 （b ^ (b >> 31)) - (b >> 31) == b。
 */

int main(){
	int x;
	cin>>x;
	
	cout<<jd(x);
	
	return 0;
}
```
位运算统计二进制数1的个数
```cpp
//li5
#include<bits/stdc++.h>
using namespace std;
int tj(int x){
	int cnt = 0;
	while(x){
		x = x & (x - 1);
		cnt ++;
	}
	return cnt;
}
/*
  对于任意的x，转换成二进制后，是形如这样的数字：aa…aa10…00，从右向左数有任意多个0，
  直到遇见第一个1，字母a用来占位，代表1左边的任意数字。x-1转换成二进制后，
  是形如这样的数字：aa…aa01…11，从右向左数，原来的任意多个0都变成1，原来的第一个1，变成0，
  字母a部分不变。对x 和 x-1 进行 按位与 计算，会得到：aa…aa00…00，从右向左数，
  原来的第一个1变成了0，字母a部分不变。所以 x & (x-1)相当于消除了 x 从右向左数遇到的第一个1。
  那么，x转换成二进制后包含多少个1，tj函数里的循环就会进行多少次，直到x所有的1都被“消除”。
 */
int main(){
	int a;
	cin>>a;
	cout<<tj(a);
	
	return 0;
}
```
------------
## 2. 快读快写
```cpp
//int 型整数变量快读
int read() {
    int x = 0, f = 1;
    char c = getchar();
    while (c < '0' || c>'9') { 
            if (c == '-')   f = -1; 
            c = getchar(); 
     }
    //while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();
    while (c >= '0' && c <= '9') {
            x = (x<<1)+(x<<3)+(ch^48);
            c = getchar();
     }
    return x * f;
}
//int 型整数变量快写
void write(int x) {
	 if(x==0){
	 	putchar('0');return;
	 }
     if(x<0) putchar('-'),x=-x;
     if(x>9) write(x/10);
     putchar(x%10+'0');
}
//字符串快读
inline string read(){
	char ch=getchar();
	string st1="";
	while (!((ch>='a')&&(ch<='z')))
	  ch=getchar();
	while ((ch>='a')&&(ch<='z')) 
	  st1+=ch,ch=getchar();
	return st1;
}

//double类型的快读
inline double DoubleRead(){
    long long s = 0, w = 1, k = 0, n = 0, m = 0;
    char ch = getchar(); 
    while(ch < '0' || ch > '9'){
        if(ch == '-') w = -1;
        ch = getchar();
    }
    while((ch >= '0' && ch <= '9') || ch == '.'){
        if (ch == '.')
            n = 1;
        else if (n == 0)
            s = s * 10 + ch - '0';
           else k = k * 10 + ch - '0', m++;
        ch = getchar();
    }
    return (pow(0.1, m) * k + s) * w;
}
//关闭流输入
ios::sync_with_stdio(false);
    cin.tie(0);
```
---
## 3.协议
#### [详细](https://blog.csdn.net/leah126/article/details/131517101?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171636491616800226562183%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171636491616800226562183&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-131517101-null-null.142^v100^pc_search_result_base7&utm_term=%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86&spm=1018.2226.3001.4187)
TCP/IP协议族： TCP/IP（Transmission Control Protocol/Internet Protocol）是互联网的基础协议，包括许多子协议，如： TCP（Transmission Control Protocol）：提供可靠的数据传输。

IP（Internet Protocol）：负责数据包的路由和传递。

HTTP（Hypertext Transfer Protocol）：用于在Web上传输超文本文档的协议。

FTP（File Transfer Protocol）：用于文件传输的协议。

SMTP（Simple Mail Transfer Protocol）：用于电子邮件的发送。

POP3（Post Office Protocol Version 3）和IMAP（Internet Message Access Protocol）：用于电子邮件的接收协议。

DNS（Domain Name System）： 用于将域名解析为IP地址的协议，使我们可以通过域名访问网站而不是记住复杂的IP地址。

HTTP/HTTPS： 用于在Web上传输和访问网页的协议，其中HTTPS提供了加密和安全性。

FTP（File Transfer Protocol）： 用于文件传输的协议，允许用户上传和下载文件到服务器上。

SMTP/POP3/IMAP： 用于电子邮件的协议，SMTP用于发送邮件，而POP3和IMAP用于接收邮件。

SSH（Secure Shell）： 用于安全远程登录和管理计算机系统的协议。

SNMP（Simple Network Management Protocol）： 用于监控和管理网络设备的协议。

ICMP（Internet Control Message Protocol）： 用于处理网络错误消息和故障诊断。

BGP（Border Gateway Protocol）： 用于互联网路由表的协议，用于确定数据包的最佳路径。

RTP（Real-time Transport Protocol）： 用于实时多媒体数据传输，如音频和视频。

SIP（Session Initiation Protocol）： 用于建立、管理和终止多媒体通信会话，如VoIP电话。

DHCP（Dynamic Host Configuration Protocol）： 用于自动分配IP地址和其他网络配置信息给计算机。

NNTP（Network News Transfer Protocol）： 用于新闻组的分发和阅读。

HTTPS（HyperText Transfer Protocol Secure）： 基于TLS/SSL加密的HTTP协议，用于安全的Web通信。

WebSocket： 用于在Web应用程序中建立持久性连接的协议，支持双向通信。

----

## 4.高精

### 加法
高精度加法，其实就是竖式加法啦。

![1](https://oi-wiki.org/math/images/plus.png)

也就是从最低位开始，将两个加数对应位置上的数码相加，并判断是否达到或超过 10。如果达到，那么处理进位：将更高一位的结果上增加 1，当前位的结果减少 10。
```cpp
void add(int a[], int b[], int c[]) {
  clear(c);

  // 高精度实现中，一般令数组的最大长度 LEN 比可能的输入大一些
  // 然后略去末尾的几次循环，这样一来可以省去不少边界情况的处理
  // 因为实际输入不会超过 1000 位，故在此循环到 LEN - 1 = 1003 已经足够
  for (int i = 0; i < LEN - 1; ++i) {
    // 将相应位上的数码相加
    c[i] += a[i] + b[i];
    if (c[i] >= 10) {
      // 进位
      c[i + 1] += 1;
      c[i] -= 10;
    }
  }
}
```
试着和上一部分结合，可以得到一个加法计算器。
```cpp
#include <cstdio>
#include <cstring>

static const int LEN = 1004;

int a[LEN], b[LEN], c[LEN];

void clear(int a[]) {
  for (int i = 0; i < LEN; ++i) a[i] = 0;
}

void read(int a[]) {
  static char s[LEN + 1];
  scanf("%s", s);

  clear(a);

  int len = strlen(s);
  for (int i = 0; i < len; ++i) a[len - i - 1] = s[i] - '0';
}

void print(int a[]) {
  int i;
  for (i = LEN - 1; i >= 1; --i)
    if (a[i] != 0) break;
  for (; i >= 0; --i) putchar(a[i] + '0');
  putchar('\n');
}

void add(int a[], int b[], int c[]) {
  clear(c);

  for (int i = 0; i < LEN - 1; ++i) {
    c[i] += a[i] + b[i];
    if (c[i] >= 10) {
      c[i + 1] += 1;
      c[i] -= 10;
    }
  }
}

int main() {
  read(a);
  read(b);

  add(a, b, c);
  print(c);

  return 0;
}
```
---
### 减法
高精度减法，也就是竖式减法啦。

![2](https://oi-wiki.org/math/images/subtraction.png)

从个位起逐位相减，遇到负的情况则向上一位借 1。整体思路与加法完全一致。
```cpp
void sub(int a[], int b[], int c[]) {
  clear(c);

  for (int i = 0; i < LEN - 1; ++i) {
    // 逐位相减
    c[i] += a[i] - b[i];
    if (c[i] < 0) {
      // 借位
      c[i + 1] -= 1;
      c[i] += 10;
    }
  }
}
```
将上一个程序中的 add() 替换成 sub()，就有了一个减法计算器。
```cpp
#include <cstdio>
#include <cstring>

static const int LEN = 1004;

int a[LEN], b[LEN], c[LEN];

void clear(int a[]) {
  for (int i = 0; i < LEN; ++i) a[i] = 0;
}

void read(int a[]) {
  static char s[LEN + 1];
  scanf("%s", s);

  clear(a);

  int len = strlen(s);
  for (int i = 0; i < len; ++i) a[len - i - 1] = s[i] - '0';
}

void print(int a[]) {
  int i;
  for (i = LEN - 1; i >= 1; --i)
    if (a[i] != 0) break;
  for (; i >= 0; --i) putchar(a[i] + '0');
  putchar('\n');
}

void sub(int a[], int b[], int c[]) {
  clear(c);

  for (int i = 0; i < LEN - 1; ++i) {
    c[i] += a[i] - b[i];
    if (c[i] < 0) {
      c[i + 1] -= 1;
      c[i] += 10;
    }
  }
}

int main() {
  read(a);
  read(b);

  sub(a, b, c);
  print(c);

  return 0;
}
```
---
### 除法
高精度除法的一种实现方式就是竖式长除法。

![](https://oi-wiki.org/math/images/division.png)

竖式长除法实际上可以看作一个逐次减法的过程。例如上图中商数十位的计算可以这样理解：将 45 减去三次 12 后变得小于 12，不能再减，故此位为 3。

为了减少冗余运算，我们提前得到被除数的长度 l_a 与除数的长度 l_b，从下标 l_a - l_b 开始，从高位到低位来计算商。这和手工计算时将第一次乘法的最高位与被除数最高位对齐的做法是一样的。

参考程序实现了一个函数 greater_eq() 用于判断被除数以下标 last_dg 为最低位，是否可以再减去除数而保持非负。此后对于商的每一位，不断调用 greater_eq()，并在成立的时候用高精度减法从余数中减去除数，也即模拟了竖式除法的过程。
```cpp
// 被除数 a 以下标 last_dg 为最低位，是否可以再减去除数 b 而保持非负
// len 是除数 b 的长度，避免反复计算
bool greater_eq(int a[], int b[], int last_dg, int len) {
  // 有可能被除数剩余的部分比除数长，这个情况下最多多出 1 位，故如此判断即可
  if (a[last_dg + len] != 0) return true;
  // 从高位到低位，逐位比较
  for (int i = len - 1; i >= 0; --i) {
    if (a[last_dg + i] > b[i]) return true;
    if (a[last_dg + i] < b[i]) return false;
  }
  // 相等的情形下也是可行的
  return true;
}

void div(int a[], int b[], int c[], int d[]) {
  clear(c);
  clear(d);

  int la, lb;
  for (la = LEN - 1; la > 0; --la)
    if (a[la - 1] != 0) break;
  for (lb = LEN - 1; lb > 0; --lb)
    if (b[lb - 1] != 0) break;
  if (lb == 0) {
    puts("> <");
    return;
  }  // 除数不能为零

  // c 是商
  // d 是被除数的剩余部分，算法结束后自然成为余数
  for (int i = 0; i < la; ++i) d[i] = a[i];
  for (int i = la - lb; i >= 0; --i) {
    // 计算商的第 i 位
    while (greater_eq(d, b, i, lb)) {
      // 若可以减，则减
      // 这一段是一个高精度减法
      for (int j = 0; j < lb; ++j) {
        d[i + j] -= b[j];
        if (d[i + j] < 0) {
          d[i + j + 1] -= 1;
          d[i + j] += 10;
        }
      }
      // 使商的这一位增加 1
      c[i] += 1;
      // 返回循环开头，重新检查
    }
  }
}
```
